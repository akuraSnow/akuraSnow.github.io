{"remainingRequest":"F:\\slate\\easteduCompoents\\node_modules\\thread-loader\\dist\\cjs.js??ref--11-1!F:\\slate\\easteduCompoents\\node_modules\\docz-core\\node_modules\\babel-loader\\lib\\index.js??ref--11-2!F:\\slate\\easteduCompoents\\node_modules\\source-map-loader\\index.js!F:\\slate\\easteduCompoents\\src\\QuestionEditor\\editor\\components.tsx","dependencies":[{"path":"F:\\slate\\easteduCompoents\\src\\QuestionEditor\\editor\\components.tsx","mtime":1611716728562},{"path":"F:\\slate\\easteduCompoents\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1611297672593},{"path":"F:\\slate\\easteduCompoents\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1611297676370},{"path":"F:\\slate\\easteduCompoents\\node_modules\\docz-core\\node_modules\\babel-loader\\lib\\index.js","mtime":1611297672218},{"path":"F:\\slate\\easteduCompoents\\node_modules\\source-map-loader\\index.js","mtime":1599723087186}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJhbnRkL2VzL3NsaWRlci9zdHlsZSI7CmltcG9ydCBfU2xpZGVyIGZyb20gImFudGQvZXMvc2xpZGVyIjsKaW1wb3J0IF90YWdnZWRUZW1wbGF0ZUxpdGVyYWwgZnJvbSAiRjpcXHNsYXRlXFxlYXN0ZWR1Q29tcG9lbnRzXFxub2RlX21vZHVsZXNcXGJhYmVsLXByZXNldC1yZWFjdC1hcHBcXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbCI7CmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAiRjpcXHNsYXRlXFxlYXN0ZWR1Q29tcG9lbnRzXFxub2RlX21vZHVsZXNcXGJhYmVsLXByZXNldC1yZWFjdC1hcHBcXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIjsKCnZhciBfdGhpcyA9IHRoaXMsCiAgICBfanN4RmlsZU5hbWUgPSAiRjpcXHNsYXRlXFxlYXN0ZWR1Q29tcG9lbnRzXFxzcmNcXFF1ZXN0aW9uRWRpdG9yXFxlZGl0b3JcXGNvbXBvbmVudHMudHN4IjsKCihmdW5jdGlvbiAoKSB7CiAgdmFyIGVudGVyTW9kdWxlID0gdHlwZW9mIHJlYWN0SG90TG9hZGVyR2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IHJlYWN0SG90TG9hZGVyR2xvYmFsLmVudGVyTW9kdWxlIDogdW5kZWZpbmVkOwogIGVudGVyTW9kdWxlICYmIGVudGVyTW9kdWxlKG1vZHVsZSk7Cn0pKCk7CgpmdW5jdGlvbiBfdGVtcGxhdGVPYmplY3QxMCgpIHsKICB2YXIgZGF0YSA9IF90YWdnZWRUZW1wbGF0ZUxpdGVyYWwoWyJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAyNXB4O1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIHBhZGRpbmc6IDE1cHggMThweDtcbiAgICAgICAgICAgICAgICAvLyBib3JkZXItYm90dG9tOiAycHggc29saWQgI2VlZTtcbiAgICAgICAgICAgICAgICAiXSk7CgogIF90ZW1wbGF0ZU9iamVjdDEwID0gZnVuY3Rpb24gX3RlbXBsYXRlT2JqZWN0MTAoKSB7CiAgICByZXR1cm4gZGF0YTsKICB9OwoKICByZXR1cm4gZGF0YTsKfQoKZnVuY3Rpb24gX3RlbXBsYXRlT2JqZWN0OSgpIHsKICB2YXIgZGF0YSA9IF90YWdnZWRUZW1wbGF0ZUxpdGVyYWwoWyJcbiAgICAgICAgICAgICAgICAmID4gKiB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICYgPiAqICsgKiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG1pbi13aWR0aDogcHg7XG4gICAgICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgICAgICAgICAgLy8gbWFyZ2luLWxlZnQ6IDJweDtcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI2ZmZlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICJdKTsKCiAgX3RlbXBsYXRlT2JqZWN0OSA9IGZ1bmN0aW9uIF90ZW1wbGF0ZU9iamVjdDkoKSB7CiAgICByZXR1cm4gZGF0YTsKICB9OwoKICByZXR1cm4gZGF0YTsKfQoKZnVuY3Rpb24gX3RlbXBsYXRlT2JqZWN0OCgpIHsKICB2YXIgZGF0YSA9IF90YWdnZWRUZW1wbGF0ZUxpdGVyYWwoWyJcbiAgICAgICAgICAgICAgICB3aGl0ZS1zcGFjZTogcHJlLXdyYXA7XG4gICAgICAgICAgICAgICAgbWFyZ2luOiAwIC0yMHB4IDEwcHg7XG4gICAgICAgICAgICAgICAgcGFkZGluZzogMTBweCAyMHB4O1xuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAjZjhmOGU4O1xuICAgICAgICAgICAgIl0pOwoKICBfdGVtcGxhdGVPYmplY3Q4ID0gZnVuY3Rpb24gX3RlbXBsYXRlT2JqZWN0OCgpIHsKICAgIHJldHVybiBkYXRhOwogIH07CgogIHJldHVybiBkYXRhOwp9CgpmdW5jdGlvbiBfdGVtcGxhdGVPYmplY3Q3KCkgewogIHZhciBkYXRhID0gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbChbIlxuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMThweDtcbiAgICAgICAgICAgICAgICAvLyB2ZXJ0aWNhbC1hbGlnbjogdGV4dC1ib3R0b207XG4gICAgICAgICAgICAgICAgIl0pOwoKICBfdGVtcGxhdGVPYmplY3Q3ID0gZnVuY3Rpb24gX3RlbXBsYXRlT2JqZWN0NygpIHsKICAgIHJldHVybiBkYXRhOwogIH07CgogIHJldHVybiBkYXRhOwp9CgpmdW5jdGlvbiBfdGVtcGxhdGVPYmplY3Q2KCkgewogIHZhciBkYXRhID0gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbChbIlxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICM0MDQwNDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb250OiAxMnB4IG1vbm9zcGFjZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlLXNwYWNlOiBwcmUtd3JhcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDEwcHggMjBweDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpdiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDAgMCAwLjVlbTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgIl0pOwoKICBfdGVtcGxhdGVPYmplY3Q2ID0gZnVuY3Rpb24gX3RlbXBsYXRlT2JqZWN0NigpIHsKICAgIHJldHVybiBkYXRhOwogIH07CgogIHJldHVybiBkYXRhOwp9CgpmdW5jdGlvbiBfdGVtcGxhdGVPYmplY3Q1KCkgewogIHZhciBkYXRhID0gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbChbIlxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogNXB4IDIwcHg7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogIzQwNDA0MDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlci10b3A6IDJweCBzb2xpZCAjZWVlZWVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogI2Y4ZjhmODtcbiAgICAgICAgICAgICAgICAgICAgIl0pOwoKICBfdGVtcGxhdGVPYmplY3Q1ID0gZnVuY3Rpb24gX3RlbXBsYXRlT2JqZWN0NSgpIHsKICAgIHJldHVybiBkYXRhOwogIH07CgogIHJldHVybiBkYXRhOwp9CgpmdW5jdGlvbiBfdGVtcGxhdGVPYmplY3Q0KCkgewogIHZhciBkYXRhID0gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbChbIlxuICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDMwcHggLTIwcHggMDtcbiAgICAgICAgICAgICAgICAiXSk7CgogIF90ZW1wbGF0ZU9iamVjdDQgPSBmdW5jdGlvbiBfdGVtcGxhdGVPYmplY3Q0KCkgewogICAgcmV0dXJuIGRhdGE7CiAgfTsKCiAgcmV0dXJuIGRhdGE7Cn0KCmZ1bmN0aW9uIF90ZW1wbGF0ZU9iamVjdDMoKSB7CiAgdmFyIGRhdGEgPSBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKFsiXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgICAgICAgICAgICAiXSk7CgogIF90ZW1wbGF0ZU9iamVjdDMgPSBmdW5jdGlvbiBfdGVtcGxhdGVPYmplY3QzKCkgewogICAgcmV0dXJuIGRhdGE7CiAgfTsKCiAgcmV0dXJuIGRhdGE7Cn0KCmZ1bmN0aW9uIF90ZW1wbGF0ZU9iamVjdDIoKSB7CiAgdmFyIGRhdGEgPSBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKFsiXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgICAgICAgICAgICAiXSk7CgogIF90ZW1wbGF0ZU9iamVjdDIgPSBmdW5jdGlvbiBfdGVtcGxhdGVPYmplY3QyKCkgewogICAgcmV0dXJuIGRhdGE7CiAgfTsKCiAgcmV0dXJuIGRhdGE7Cn0KCmZ1bmN0aW9uIF90ZW1wbGF0ZU9iamVjdCgpIHsKICB2YXIgZGF0YSA9IF90YWdnZWRUZW1wbGF0ZUxpdGVyYWwoWyJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICIsICI7Il0pOwoKICBfdGVtcGxhdGVPYmplY3QgPSBmdW5jdGlvbiBfdGVtcGxhdGVPYmplY3QoKSB7CiAgICByZXR1cm4gZGF0YTsKICB9OwoKICByZXR1cm4gZGF0YTsKfQoKdmFyIF9fc2lnbmF0dXJlX18gPSB0eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwgIT09ICd1bmRlZmluZWQnID8gcmVhY3RIb3RMb2FkZXJHbG9iYWxbImRlZmF1bHQiXS5zaWduYXR1cmUgOiBmdW5jdGlvbiAoYSkgewogIHJldHVybiBhOwp9OwoKLy8gQHRzLW5vY2hlY2sKaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JzsKaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7CmltcG9ydCB7IGN4LCBjc3MgfSBmcm9tICdlbW90aW9uJzsKZXhwb3J0IHZhciBCdXR0b24gPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChlLCByZWYpIHsKICB2YXIgY2xhc3NOYW1lID0gZS5jbGFzc05hbWUsCiAgICAgIGFjdGl2ZSA9IGUuYWN0aXZlLAogICAgICB2aXNpYmxlID0gZS52aXNpYmxlLAogICAgICB0aXRsZSA9IGUudGl0bGUsCiAgICAgIHJldmVyc2VkID0gZS5yZXZlcnNlZCwKICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoZSwgWyJjbGFzc05hbWUiLCAiYWN0aXZlIiwgInZpc2libGUiLCAidGl0bGUiLCAicmV2ZXJzZWQiXSk7CgogIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgic3BhbiIsIE9iamVjdC5hc3NpZ24oe30sIHByb3BzLCB7CiAgICByZWY6IHJlZiwKICAgIGNsYXNzTmFtZTogY3goJ2J1dHRvblRpdGxlJywgY2xhc3NOYW1lLCBjc3MoX3RlbXBsYXRlT2JqZWN0KCksIHJldmVyc2VkID8gYWN0aXZlID8gJ3doaXRlJyA6ICcjRThFOEU4JyA6IGFjdGl2ZSA/ICcjQkZCRkJGJyA6IHZpc2libGUgPyAnI0Y1RjVGNScgOiAnd2hpdGUnKSksCiAgICBfX3NlbGY6IF90aGlzLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTQsCiAgICAgIGNvbHVtbk51bWJlcjogMTMKICAgIH0KICB9KSk7Cn0pOwoKaWYgKHR5cGVvZiBCdXR0b24gIT09ICd1bmRlZmluZWQnICYmIEJ1dHRvbiAmJiBCdXR0b24gPT09IE9iamVjdChCdXR0b24pICYmIE9iamVjdC5pc0V4dGVuc2libGUoQnV0dG9uKSkgewogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdXR0b24sICdfX2ZpbGVtZXRhJywgewogICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgIHZhbHVlOiB7CiAgICAgIG5hbWU6ICJCdXR0b24iLAogICAgICBmaWxlbmFtZTogInNyY1xcUXVlc3Rpb25FZGl0b3JcXGVkaXRvclxcY29tcG9uZW50cy50c3giCiAgICB9CiAgfSk7Cn0KCmV4cG9ydCB2YXIgQnV0dG9uMSA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKGUsIHJlZikgewogIHZhciBjbGFzc05hbWUgPSBlLmNsYXNzTmFtZSwKICAgICAgYWN0aXZlID0gZS5hY3RpdmUsCiAgICAgIHZpc2libGUgPSBlLnZpc2libGUsCiAgICAgIHRpdGxlID0gZS50aXRsZSwKICAgICAgcmV2ZXJzZWQgPSBlLnJldmVyc2VkLAogICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhlLCBbImNsYXNzTmFtZSIsICJhY3RpdmUiLCAidmlzaWJsZSIsICJ0aXRsZSIsICJyZXZlcnNlZCJdKTsKCiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJzcGFuIiwgT2JqZWN0LmFzc2lnbih7fSwgcHJvcHMsIHsKICAgIHJlZjogcmVmLAogICAgY2xhc3NOYW1lOiBjeCgnYnV0dG9uVGl0bGUnLCBjbGFzc05hbWUsIGNzcyhfdGVtcGxhdGVPYmplY3QyKCkpKSwKICAgIF9fc2VsZjogX3RoaXMsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAzNywKICAgICAgY29sdW1uTnVtYmVyOiAxMwogICAgfQogIH0pKTsKfSk7CgppZiAodHlwZW9mIEJ1dHRvbjEgIT09ICd1bmRlZmluZWQnICYmIEJ1dHRvbjEgJiYgQnV0dG9uMSA9PT0gT2JqZWN0KEJ1dHRvbjEpICYmIE9iamVjdC5pc0V4dGVuc2libGUoQnV0dG9uMSkpIHsKICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQnV0dG9uMSwgJ19fZmlsZW1ldGEnLCB7CiAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgdmFsdWU6IHsKICAgICAgbmFtZTogIkJ1dHRvbjEiLAogICAgICBmaWxlbmFtZTogInNyY1xcUXVlc3Rpb25FZGl0b3JcXGVkaXRvclxcY29tcG9uZW50cy50c3giCiAgICB9CiAgfSk7Cn0KCmV4cG9ydCB2YXIgQnV0dG9uMiA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKGUsIHJlZikgewogIHZhciBjbGFzc05hbWUgPSBlLmNsYXNzTmFtZSwKICAgICAgYWN0aXZlID0gZS5hY3RpdmUsCiAgICAgIHZpc2libGUgPSBlLnZpc2libGUsCiAgICAgIHRpdGxlID0gZS50aXRsZSwKICAgICAgcmV2ZXJzZWQgPSBlLnJldmVyc2VkLAogICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhlLCBbImNsYXNzTmFtZSIsICJhY3RpdmUiLCAidmlzaWJsZSIsICJ0aXRsZSIsICJyZXZlcnNlZCJdKTsKCiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJzcGFuIiwgT2JqZWN0LmFzc2lnbih7fSwgcHJvcHMsIHsKICAgIHJlZjogcmVmLAogICAgY2xhc3NOYW1lOiBjeCgnYnV0dG9uVGl0bGUnLCBjbGFzc05hbWUsIGNzcyhfdGVtcGxhdGVPYmplY3QzKCkpKSwKICAgIF9fc2VsZjogX3RoaXMsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiA2MCwKICAgICAgY29sdW1uTnVtYmVyOiAxMwogICAgfQogIH0pKTsKfSk7CgppZiAodHlwZW9mIEJ1dHRvbjIgIT09ICd1bmRlZmluZWQnICYmIEJ1dHRvbjIgJiYgQnV0dG9uMiA9PT0gT2JqZWN0KEJ1dHRvbjIpICYmIE9iamVjdC5pc0V4dGVuc2libGUoQnV0dG9uMikpIHsKICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQnV0dG9uMiwgJ19fZmlsZW1ldGEnLCB7CiAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgdmFsdWU6IHsKICAgICAgbmFtZTogIkJ1dHRvbjIiLAogICAgICBmaWxlbmFtZTogInNyY1xcUXVlc3Rpb25FZGl0b3JcXGVkaXRvclxcY29tcG9uZW50cy50c3giCiAgICB9CiAgfSk7Cn0KCmV4cG9ydCB2YXIgQnV0dG9uMyA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gKGUsIHJlZikgewogIHZhciBjbGFzc05hbWUgPSBlLmNsYXNzTmFtZSwKICAgICAgYWN0aXZlID0gZS5hY3RpdmUsCiAgICAgIHZpc2libGUgPSBlLnZpc2libGUsCiAgICAgIHRpdGxlID0gZS50aXRsZSwKICAgICAgcmV2ZXJzZWQgPSBlLnJldmVyc2VkLAogICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhlLCBbImNsYXNzTmFtZSIsICJhY3RpdmUiLCAidmlzaWJsZSIsICJ0aXRsZSIsICJyZXZlcnNlZCJdKTsKCiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9TbGlkZXIsIE9iamVjdC5hc3NpZ24oe30sIHByb3BzLCB7CiAgICByZWY6IHJlZiwKICAgIG1pbjogMC4xLAogICAgbWF4OiAyLjAsCiAgICBzdGVwOiAwLjEsCiAgICBpbmNsdWRlZDogZmFsc2UsCiAgICBzdHlsZTogewogICAgICB3aWR0aDogJzEwMHB4JwogICAgfSAvLyBmb2N1cz17KGUpID0+IHsKICAgIC8vICAgICBjb25zb2xlLmUoZSk7CiAgICAvLyB9fQogICAgLy8gZGVmYXVsdFZhbHVlPXszMH0KICAgIC8vIG9uQ2hhbmdlPXtvbkNoYW5nZX0KICAgIC8vIG9uQWZ0ZXJDaGFuZ2U9e29uQWZ0ZXJDaGFuZ2V9CiAgICAsCiAgICBfX3NlbGY6IF90aGlzLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogODMsCiAgICAgIGNvbHVtbk51bWJlcjogMTMKICAgIH0KICB9KSk7Cn0pOwoKaWYgKHR5cGVvZiBCdXR0b24zICE9PSAndW5kZWZpbmVkJyAmJiBCdXR0b24zICYmIEJ1dHRvbjMgPT09IE9iamVjdChCdXR0b24zKSAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKEJ1dHRvbjMpKSB7CiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1dHRvbjMsICdfX2ZpbGVtZXRhJywgewogICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgIHZhbHVlOiB7CiAgICAgIG5hbWU6ICJCdXR0b24zIiwKICAgICAgZmlsZW5hbWU6ICJzcmNcXFF1ZXN0aW9uRWRpdG9yXFxlZGl0b3JcXGNvbXBvbmVudHMudHN4IgogICAgfQogIH0pOwp9CgpleHBvcnQgdmFyIEVkaXRvclZhbHVlID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZiwgcmVmKSB7CiAgdmFyIGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLAogICAgICB2YWx1ZSA9IF9yZWYudmFsdWUsCiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFsiY2xhc3NOYW1lIiwgInZhbHVlIl0pOwoKICB2YXIgdGV4dExpbmVzID0gdmFsdWUuZG9jdW1lbnQubm9kZXMubWFwKGZ1bmN0aW9uIChub2RlKSB7CiAgICByZXR1cm4gbm9kZS50ZXh0OwogIH0pLnRvQXJyYXkoKS5qb2luKCdcbicpOwogIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgiZGl2IiwgT2JqZWN0LmFzc2lnbih7CiAgICByZWY6IHJlZgogIH0sIHByb3BzLCB7CiAgICBjbGFzc05hbWU6IGN4KGNsYXNzTmFtZSwgY3NzKF90ZW1wbGF0ZU9iamVjdDQoKSkpLAogICAgX19zZWxmOiBfdGhpcywKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDExMSwKICAgICAgY29sdW1uTnVtYmVyOiAxMwogICAgfQogIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudCgiZGl2IiwgewogICAgY2xhc3NOYW1lOiBjc3MoX3RlbXBsYXRlT2JqZWN0NSgpKSwKICAgIF9fc2VsZjogX3RoaXMsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxMjEsCiAgICAgIGNvbHVtbk51bWJlcjogMTcKICAgIH0KICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoImRpdiIsIHsKICAgIGNsYXNzTmFtZTogY3NzKF90ZW1wbGF0ZU9iamVjdDYoKSksCiAgICBfX3NlbGY6IF90aGlzLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTMwLAogICAgICBjb2x1bW5OdW1iZXI6IDE3CiAgICB9CiAgfSwgdGV4dExpbmVzKSk7Cn0pOwoKaWYgKHR5cGVvZiBFZGl0b3JWYWx1ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgRWRpdG9yVmFsdWUgJiYgRWRpdG9yVmFsdWUgPT09IE9iamVjdChFZGl0b3JWYWx1ZSkgJiYgT2JqZWN0LmlzRXh0ZW5zaWJsZShFZGl0b3JWYWx1ZSkpIHsKICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRWRpdG9yVmFsdWUsICdfX2ZpbGVtZXRhJywgewogICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgIHZhbHVlOiB7CiAgICAgIG5hbWU6ICJFZGl0b3JWYWx1ZSIsCiAgICAgIGZpbGVuYW1lOiAic3JjXFxRdWVzdGlvbkVkaXRvclxcZWRpdG9yXFxjb21wb25lbnRzLnRzeCIKICAgIH0KICB9KTsKfQoKZXhwb3J0IHZhciBJY29uID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAoZSwgcmVmKSB7CiAgdmFyIGNsYXNzTmFtZSA9IGUuY2xhc3NOYW1lLAogICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhlLCBbImNsYXNzTmFtZSJdKTsKCiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJzcGFuIiwgT2JqZWN0LmFzc2lnbih7fSwgcHJvcHMsIHsKICAgIHJlZjogcmVmLAogICAgY2xhc3NOYW1lOiBjeCgnbWF0ZXJpYWwtaWNvbnMnLCBjbGFzc05hbWUsIGNzcyhfdGVtcGxhdGVPYmplY3Q3KCkpKSwKICAgIF9fc2VsZjogX3RoaXMsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAxNTMsCiAgICAgIGNvbHVtbk51bWJlcjogOQogICAgfQogIH0pKTsKfSk7CgppZiAodHlwZW9mIEljb24gIT09ICd1bmRlZmluZWQnICYmIEljb24gJiYgSWNvbiA9PT0gT2JqZWN0KEljb24pICYmIE9iamVjdC5pc0V4dGVuc2libGUoSWNvbikpIHsKICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSWNvbiwgJ19fZmlsZW1ldGEnLCB7CiAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgdmFsdWU6IHsKICAgICAgbmFtZTogIkljb24iLAogICAgICBmaWxlbmFtZTogInNyY1xcUXVlc3Rpb25FZGl0b3JcXGVkaXRvclxcY29tcG9uZW50cy50c3giCiAgICB9CiAgfSk7Cn0KCmV4cG9ydCB2YXIgSW5zdHJ1Y3Rpb24gPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmMiwgcmVmKSB7CiAgdmFyIGNsYXNzTmFtZSA9IF9yZWYyLmNsYXNzTmFtZSwKICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZjIsIFsiY2xhc3NOYW1lIl0pOwoKICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoImRpdiIsIE9iamVjdC5hc3NpZ24oe30sIHByb3BzLCB7CiAgICByZWY6IHJlZiwKICAgIGNsYXNzTmFtZTogY3goY2xhc3NOYW1lLCBjc3MoX3RlbXBsYXRlT2JqZWN0OCgpKSksCiAgICBfX3NlbGY6IF90aGlzLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMTcwLAogICAgICBjb2x1bW5OdW1iZXI6IDUKICAgIH0KICB9KSk7Cn0pOwoKaWYgKHR5cGVvZiBJbnN0cnVjdGlvbiAhPT0gJ3VuZGVmaW5lZCcgJiYgSW5zdHJ1Y3Rpb24gJiYgSW5zdHJ1Y3Rpb24gPT09IE9iamVjdChJbnN0cnVjdGlvbikgJiYgT2JqZWN0LmlzRXh0ZW5zaWJsZShJbnN0cnVjdGlvbikpIHsKICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSW5zdHJ1Y3Rpb24sICdfX2ZpbGVtZXRhJywgewogICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgIHZhbHVlOiB7CiAgICAgIG5hbWU6ICJJbnN0cnVjdGlvbiIsCiAgICAgIGZpbGVuYW1lOiAic3JjXFxRdWVzdGlvbkVkaXRvclxcZWRpdG9yXFxjb21wb25lbnRzLnRzeCIKICAgIH0KICB9KTsKfQoKZXhwb3J0IHZhciBNZW51ID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZjMsIHJlZikgewogIHZhciBjbGFzc05hbWUgPSBfcmVmMy5jbGFzc05hbWUsCiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYzLCBbImNsYXNzTmFtZSJdKTsKCiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJkaXYiLCBPYmplY3QuYXNzaWduKHt9LCBwcm9wcywgewogICAgcmVmOiByZWYsCiAgICBjbGFzc05hbWU6IGN4KGNsYXNzTmFtZSwgY3NzKF90ZW1wbGF0ZU9iamVjdDkoKSkpLAogICAgX19zZWxmOiBfdGhpcywKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDE4NywKICAgICAgY29sdW1uTnVtYmVyOiA1CiAgICB9CiAgfSkpOwp9KTsKCmlmICh0eXBlb2YgTWVudSAhPT0gJ3VuZGVmaW5lZCcgJiYgTWVudSAmJiBNZW51ID09PSBPYmplY3QoTWVudSkgJiYgT2JqZWN0LmlzRXh0ZW5zaWJsZShNZW51KSkgewogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNZW51LCAnX19maWxlbWV0YScsIHsKICAgIGVudW1lcmFibGU6IHRydWUsCiAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICB2YWx1ZTogewogICAgICBuYW1lOiAiTWVudSIsCiAgICAgIGZpbGVuYW1lOiAic3JjXFxRdWVzdGlvbkVkaXRvclxcZWRpdG9yXFxjb21wb25lbnRzLnRzeCIKICAgIH0KICB9KTsKfQoKZXhwb3J0IHZhciBQb3J0YWwgPSBmdW5jdGlvbiBQb3J0YWwoX3JlZjQpIHsKICB2YXIgY2hpbGRyZW4gPSBfcmVmNC5jaGlsZHJlbjsKICByZXR1cm4gUmVhY3RET00uY3JlYXRlUG9ydGFsKGNoaWxkcmVuLCBkb2N1bWVudC5ib2R5KTsKfTsKCmlmICh0eXBlb2YgUG9ydGFsICE9PSAndW5kZWZpbmVkJyAmJiBQb3J0YWwgJiYgUG9ydGFsID09PSBPYmplY3QoUG9ydGFsKSAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKFBvcnRhbCkpIHsKICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUG9ydGFsLCAnX19maWxlbWV0YScsIHsKICAgIGVudW1lcmFibGU6IHRydWUsCiAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICB2YWx1ZTogewogICAgICBuYW1lOiAiUG9ydGFsIiwKICAgICAgZmlsZW5hbWU6ICJzcmNcXFF1ZXN0aW9uRWRpdG9yXFxlZGl0b3JcXGNvbXBvbmVudHMudHN4IgogICAgfQogIH0pOwp9CgpleHBvcnQgdmFyIFRvb2xiYXIgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChlLCByZWYpIHsKICAvLyBAdHMtaWdub3JlCiAgdmFyIGNsYXNzTmFtZSA9IGUuY2xhc3NOYW1lLAogICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhlLCBbImNsYXNzTmFtZSJdKTsKCiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE1lbnUsIE9iamVjdC5hc3NpZ24oe30sIHByb3BzLCB7CiAgICByZWY6IHJlZiAvLyBAdHMtaWdub3JlCiAgICAsCiAgICBjbGFzc05hbWU6IGN4KGNsYXNzTmFtZSwgY3NzKF90ZW1wbGF0ZU9iamVjdDEwKCkpKSwKICAgIF9fc2VsZjogX3RoaXMsCiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyMTYsCiAgICAgIGNvbHVtbk51bWJlcjogOQogICAgfQogIH0pKTsKfSk7CgppZiAodHlwZW9mIFRvb2xiYXIgIT09ICd1bmRlZmluZWQnICYmIFRvb2xiYXIgJiYgVG9vbGJhciA9PT0gT2JqZWN0KFRvb2xiYXIpICYmIE9iamVjdC5pc0V4dGVuc2libGUoVG9vbGJhcikpIHsKICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9vbGJhciwgJ19fZmlsZW1ldGEnLCB7CiAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgdmFsdWU6IHsKICAgICAgbmFtZTogIlRvb2xiYXIiLAogICAgICBmaWxlbmFtZTogInNyY1xcUXVlc3Rpb25FZGl0b3JcXGVkaXRvclxcY29tcG9uZW50cy50c3giCiAgICB9CiAgfSk7Cn0KCjsKCihmdW5jdGlvbiAoKSB7CiAgdmFyIHJlYWN0SG90TG9hZGVyID0gdHlwZW9mIHJlYWN0SG90TG9hZGVyR2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IHJlYWN0SG90TG9hZGVyR2xvYmFsLmRlZmF1bHQgOiB1bmRlZmluZWQ7CgogIGlmICghcmVhY3RIb3RMb2FkZXIpIHsKICAgIHJldHVybjsKICB9CgogIHJlYWN0SG90TG9hZGVyLnJlZ2lzdGVyKEJ1dHRvbiwgIkJ1dHRvbiIsICJGOlxcc2xhdGVcXGVhc3RlZHVDb21wb2VudHNcXHNyY1xcUXVlc3Rpb25FZGl0b3JcXGVkaXRvclxcY29tcG9uZW50cy50c3giKTsKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihCdXR0b24xLCAiQnV0dG9uMSIsICJGOlxcc2xhdGVcXGVhc3RlZHVDb21wb2VudHNcXHNyY1xcUXVlc3Rpb25FZGl0b3JcXGVkaXRvclxcY29tcG9uZW50cy50c3giKTsKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihCdXR0b24yLCAiQnV0dG9uMiIsICJGOlxcc2xhdGVcXGVhc3RlZHVDb21wb2VudHNcXHNyY1xcUXVlc3Rpb25FZGl0b3JcXGVkaXRvclxcY29tcG9uZW50cy50c3giKTsKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihCdXR0b24zLCAiQnV0dG9uMyIsICJGOlxcc2xhdGVcXGVhc3RlZHVDb21wb2VudHNcXHNyY1xcUXVlc3Rpb25FZGl0b3JcXGVkaXRvclxcY29tcG9uZW50cy50c3giKTsKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihFZGl0b3JWYWx1ZSwgIkVkaXRvclZhbHVlIiwgIkY6XFxzbGF0ZVxcZWFzdGVkdUNvbXBvZW50c1xcc3JjXFxRdWVzdGlvbkVkaXRvclxcZWRpdG9yXFxjb21wb25lbnRzLnRzeCIpOwogIHJlYWN0SG90TG9hZGVyLnJlZ2lzdGVyKEljb24sICJJY29uIiwgIkY6XFxzbGF0ZVxcZWFzdGVkdUNvbXBvZW50c1xcc3JjXFxRdWVzdGlvbkVkaXRvclxcZWRpdG9yXFxjb21wb25lbnRzLnRzeCIpOwogIHJlYWN0SG90TG9hZGVyLnJlZ2lzdGVyKEluc3RydWN0aW9uLCAiSW5zdHJ1Y3Rpb24iLCAiRjpcXHNsYXRlXFxlYXN0ZWR1Q29tcG9lbnRzXFxzcmNcXFF1ZXN0aW9uRWRpdG9yXFxlZGl0b3JcXGNvbXBvbmVudHMudHN4Iik7CiAgcmVhY3RIb3RMb2FkZXIucmVnaXN0ZXIoTWVudSwgIk1lbnUiLCAiRjpcXHNsYXRlXFxlYXN0ZWR1Q29tcG9lbnRzXFxzcmNcXFF1ZXN0aW9uRWRpdG9yXFxlZGl0b3JcXGNvbXBvbmVudHMudHN4Iik7CiAgcmVhY3RIb3RMb2FkZXIucmVnaXN0ZXIoUG9ydGFsLCAiUG9ydGFsIiwgIkY6XFxzbGF0ZVxcZWFzdGVkdUNvbXBvZW50c1xcc3JjXFxRdWVzdGlvbkVkaXRvclxcZWRpdG9yXFxjb21wb25lbnRzLnRzeCIpOwogIHJlYWN0SG90TG9hZGVyLnJlZ2lzdGVyKFRvb2xiYXIsICJUb29sYmFyIiwgIkY6XFxzbGF0ZVxcZWFzdGVkdUNvbXBvZW50c1xcc3JjXFxRdWVzdGlvbkVkaXRvclxcZWRpdG9yXFxjb21wb25lbnRzLnRzeCIpOwp9KSgpOwoKOwoKKGZ1bmN0aW9uICgpIHsKICB2YXIgbGVhdmVNb2R1bGUgPSB0eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwgIT09ICd1bmRlZmluZWQnID8gcmVhY3RIb3RMb2FkZXJHbG9iYWwubGVhdmVNb2R1bGUgOiB1bmRlZmluZWQ7CiAgbGVhdmVNb2R1bGUgJiYgbGVhdmVNb2R1bGUobW9kdWxlKTsKfSkoKTs="},{"version":3,"sources":["F:/slate/easteduCompoents/src/QuestionEditor/editor/components.tsx"],"names":["React","ReactDOM","cx","css","Button","forwardRef","e","ref","className","active","visible","title","reversed","props","Button1","Button2","Button3","width","EditorValue","value","textLines","document","nodes","map","node","text","toArray","join","Icon","Instruction","Menu","Portal","children","createPortal","body","Toolbar"],"mappings":"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","sourcesContent":["// @ts-nocheck\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { cx, css } from 'emotion';\r\nimport { Select, Dropdown, Slider } from 'antd';\r\n\r\n\r\nexport const Button = React.forwardRef(\r\n    (e, ref) => {\r\n\r\n        const { className, active, visible, title, reversed, ...props } = e;\r\n\r\n        return (\r\n            <span\r\n                {...props}\r\n                ref={ref}\r\n                className={cx(\r\n                    'buttonTitle',\r\n                    className,\r\n                    css`\r\n                    display: inline-block;\r\n                    cursor: pointer;\r\n                    background: ${reversed ? active ? 'white' : '#E8E8E8' : active ? '#BFBFBF' : visible ? '#F5F5F5' : 'white'};`\r\n                )}\r\n            >\r\n            </span>\r\n        );\r\n    }\r\n);\r\n\r\nexport const Button1 = React.forwardRef(\r\n    (e, ref) => {\r\n\r\n        const { className, active, visible, title, reversed, ...props } = e;\r\n\r\n        return (\r\n            <span\r\n                {...props}\r\n                ref={ref}\r\n                className={cx(\r\n                    'buttonTitle',\r\n                    className,\r\n                    css`\r\n                    display: inline-block;\r\n                    cursor: pointer;\r\n                    `\r\n                )}\r\n            >\r\n            </span>\r\n        );\r\n    }\r\n);\r\n\r\nexport const Button2 = React.forwardRef(\r\n    (e, ref) => {\r\n\r\n        const { className, active, visible, title, reversed, ...props } = e;\r\n\r\n        return (\r\n            <span\r\n                {...props}\r\n                ref={ref}\r\n                className={cx(\r\n                    'buttonTitle',\r\n                    className,\r\n                    css`\r\n                    display: inline-block;\r\n                    cursor: pointer;\r\n                    `\r\n                )}\r\n            >\r\n            </span>\r\n        );\r\n    }\r\n);\r\n\r\nexport const Button3 = React.forwardRef(\r\n    (e, ref) => {\r\n\r\n        const { className, active, visible, title, reversed, ...props } = e;\r\n\r\n        return (\r\n            <Slider\r\n                {...props}\r\n                ref={ref}\r\n                min={0.1}\r\n                max={2.0}\r\n                step={0.1}\r\n                included={false}\r\n                style={{ width: '100px' }}\r\n                // focus={(e) => {\r\n\r\n                //     console.e(e);\r\n                // }}\r\n                // defaultValue={30}\r\n                // onChange={onChange}\r\n                // onAfterChange={onAfterChange}\r\n            ></Slider>\r\n        );\r\n    }\r\n);\r\n\r\n\r\nexport const EditorValue = React.forwardRef(\r\n    ({ className, value, ...props }, ref) => {\r\n        const textLines = value.document.nodes\r\n            .map(node => node.text)\r\n            .toArray()\r\n            .join('\\n');\r\n        return (\r\n            <div\r\n                ref={ref}\r\n                {...props}\r\n                className={cx(\r\n                    className,\r\n                    css`\r\n                    margin: 30px -20px 0;\r\n                `\r\n                )}\r\n            >\r\n                <div\r\n                    className={css`\r\n                        font-size: 14px;\r\n                        padding: 5px 20px;\r\n                        color: #404040;\r\n                        border-top: 2px solid #eeeeee;\r\n                        background: #f8f8f8;\r\n                    `}\r\n                ></div>\r\n                <div\r\n                    className={css`\r\n                        color: #404040;\r\n                        font: 12px monospace;\r\n                        white-space: pre-wrap;\r\n                        padding: 10px 20px;\r\n                        div {\r\n                        margin: 0 0 0.5em;\r\n                        }\r\n                    `}\r\n                >\r\n                    {textLines}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n);\r\n\r\n\r\nexport const Icon = React.forwardRef((e, ref) => {\r\n\r\n    const { className, ...props } = e;\r\n    return (\r\n        <span\r\n            {...props}\r\n            ref={ref}\r\n            className={cx(\r\n                'material-icons',\r\n                className,\r\n                css`\r\n                font-size: 18px;\r\n                // vertical-align: text-bottom;\r\n                `\r\n            )}\r\n        />\r\n    );\r\n});\r\n\r\n\r\nexport const Instruction = React.forwardRef(({ className, ...props }, ref) => (\r\n    <div\r\n        {...props}\r\n        ref={ref}\r\n        className={cx(\r\n            className,\r\n            css`\r\n                white-space: pre-wrap;\r\n                margin: 0 -20px 10px;\r\n                padding: 10px 20px;\r\n                font-size: 14px;\r\n                background: #f8f8e8;\r\n            `\r\n        )}\r\n    />\r\n));\r\n\r\nexport const Menu = React.forwardRef(({ className, ...props }, ref) => (\r\n    <div\r\n        {...props}\r\n        ref={ref}\r\n        className={cx(\r\n            className,\r\n            css`\r\n                & > * {\r\n                display: inline-block;\r\n                }\r\n\r\n                & > * + * {\r\n                    // min-width: px;\r\n                    text-align: center;\r\n                    // margin-left: 2px;\r\n                    border: 1px solid #fff\r\n                }\r\n            `\r\n        )}\r\n    />\r\n));\r\n\r\nexport const Portal = ({ children }: any) => {\r\n    return ReactDOM.createPortal(children, document.body);\r\n};\r\n\r\nexport const Toolbar = React.forwardRef((e, ref) => {\r\n    // @ts-ignore\r\n    const { className, ...props } = e;\r\n    return (\r\n        <Menu\r\n            {...props}\r\n            ref={ref}\r\n            // @ts-ignore\r\n            className={cx(\r\n                className,\r\n                css`\r\n                position: relative;\r\n                height: 25px;\r\n                \r\n                // padding: 15px 18px;\r\n                // border-bottom: 2px solid #eee;\r\n                `\r\n            )}\r\n        />\r\n    );\r\n});\r\n"]}]}