{"remainingRequest":"F:\\next\\akuraSnow.github.io\\node_modules\\thread-loader\\dist\\cjs.js??ref--11-1!F:\\next\\akuraSnow.github.io\\node_modules\\docz-core\\node_modules\\babel-loader\\lib\\index.js??ref--11-2!F:\\next\\akuraSnow.github.io\\node_modules\\source-map-loader\\index.js!F:\\next\\akuraSnow.github.io\\src\\uploadFile\\uploadFile.tsx","dependencies":[{"path":"F:\\next\\akuraSnow.github.io\\src\\uploadFile\\uploadFile.tsx","mtime":1597627151075},{"path":"F:\\next\\akuraSnow.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1594630873110},{"path":"F:\\next\\akuraSnow.github.io\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1594630874798},{"path":"F:\\next\\akuraSnow.github.io\\node_modules\\docz-core\\node_modules\\babel-loader\\lib\\index.js","mtime":1594630866664},{"path":"F:\\next\\akuraSnow.github.io\\node_modules\\source-map-loader\\index.js","mtime":1594630874806}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["F:/next/akuraSnow.github.io/src/uploadFile/uploadFile.tsx"],"names":["React","Component","Cos","jsMd5File","fileExtension","postSignatures","updateFile","UploadInput","props","uniqueId","inputFile","handleFiles","e","fileList","state","maxSize","accept","fileNameLength","files","filesList","Array","from","filter","file","name","size","extension","substring","lastIndexOf","length","indexOf","toLowerCase","error","sizeLength","value","newfileList","map","index","id","String","Math","random","replace","fileObj","status","progress","uid","url","fileId","md5","fileName","createTime","Date","getTime","downloadUrl","previewUrl","setState","concat","updateFileList","setTimeout","element","sendFiles","uploadStatus","sendFiles1","token","ext","getFileMd5","fileMd5","sendData","client","genre","guid","method","provider","response","console","log","hasExist","some","fileListItem","code","upload","hasFile","success","path","onCancelFile","CosParam","signature","bucket","region","sendCosFile","that","OSSData","getAuthorization","options","callback","putObject","Bucket","Region","Key","Body","TaskReady","onHashProgress","onProgress","round","percent","err","data","statusCode","version","updateList","md5String","Promise","resolve","reject","onRef","JSON","stringify","children","multiple","click","display"],"mappings":"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","sourcesContent":["\r\n/ tslint:disable /\r\nimport React, { Component, useEffect, useState } from 'react';\r\nimport { message, Button } from 'antd';\r\n\r\n// import { Dispatch } from 'redux';\r\n// @ts-ignore\r\nimport Cos from 'cos-js-sdk-v5';\r\n// @ts-ignore\r\nimport jsMd5File from 'js-md5-file';\r\n// @ts-ignore\r\nimport fileExtension from 'file-extension';\r\n\r\nimport {\r\n  postSignatures, // 获取签名\r\n  updateFile, // 上传文件成功后，更新数据\r\n} from './servers';\r\n\r\nimport { fileListType } from './index';\r\n\r\n\r\nexport interface UploadInputbProps {\r\n  // dispatch?: Dispatch;\r\n  children: any;\r\n  accept?: string;\r\n  multiple?: boolean;\r\n  fileList: Array<fileListType>;\r\n  updateList: Function;\r\n  url: string;\r\n  maxSize: number;\r\n  fileNameLength: number;\r\n  token: string;\r\n  error: Function;\r\n  onRef?: Function;\r\n  onCancelFile?: Function;\r\n}\r\n\r\ninterface  CosParam {\r\n  signature: string;\r\n  bucket: string;\r\n  region: string;\r\n  path: string;\r\n  id: number;\r\n};\r\n\r\ninterface UploadInputState {\r\n  file: any;\r\n\r\n  fileList: fileListType[];\r\n}\r\n\r\nclass UploadInput extends Component<UploadInputbProps, UploadInputState> {\r\n  uniqueId: string = '';\r\n\r\n  private inputFile: any;\r\n\r\n  constructor(props: UploadInputbProps) {\r\n    super(props);\r\n    this.state = {\r\n      file: [],\r\n\r\n      fileList: props.fileList || [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() { \r\n    this.props.onRef && this.props.onRef(this)\r\n  }\r\n\r\n  componentWillReceiveProps(props: any) {\r\n    if (JSON.stringify(props.fileList) !== JSON.stringify(this.state.fileList)) {\r\n      if (props.fileList.length < this.state.fileList.length) {\r\n        this.inputFile.value ? this.inputFile.value = null : '';\r\n      }\r\n      this.setState({\r\n        fileList: props.fileList,\r\n      });\r\n    }\r\n  }\r\n\r\n  // 点击上传文件\r\n  // @ts-ignore\r\n  handleFiles = async (e: any) => {\r\n    // const file = e.target.files[0];\r\n\r\n    const { fileList } = this.state;\r\n    const { maxSize, accept, fileNameLength } = this.props;\r\n\r\n    let files = this.inputFile.files;\r\n\r\n    if (!files) {\r\n      return false;\r\n\r\n    }\r\n\r\n    let filesList = Array.from(files).filter((file: any) => {\r\n\r\n      let name = file.name;\r\n      let size = file.size ? file.size / 1024 / 1024 : 0;\r\n      var extension = name.substring(name.lastIndexOf(\".\") + 1, name.length);//文件扩展名\r\n      // @ts-ignore\r\n      if (accept.indexOf(extension.toLowerCase()) === -1 && accept !== '*') {\r\n        this.props.error('不支持上传的文件类型！');\r\n        // this.inputFile.files[index] = null;\r\n        return false;\r\n      }\r\n  \r\n      if (!file) {\r\n        // this.inputFile.files[index] = null;\r\n        return false;\r\n      }\r\n  \r\n      // if (fileList.length > 9) {\r\n      //   this.props.error('目前仅支持上传10个附件！');\r\n      //   this.inputFile.value = null;\r\n      //   return false;\r\n      // }\r\n  \r\n      // 文件名过长的时候\r\n      if (fileNameLength && file.name.length > fileNameLength) {\r\n        this.props.error(`文件名称不能超过${fileNameLength}个字符！`);\r\n        // this.inputFile.files[index] = null;\r\n        return false;\r\n      }\r\n  \r\n      // 当文件过大的时候，进行提示\r\n      if (size > maxSize) {\r\n        let sizeLength = maxSize > 1024 ? `${maxSize / 1024}G` : `${maxSize}M`\r\n        this.props.error(`上传文件大小不能超过${sizeLength}！`);\r\n        // this.inputFile.files[index] = null;\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n  \r\n    });\r\n\r\n    if (filesList.length === 0) {\r\n      this.inputFile.value ? this.inputFile.value = null : '';\r\n      return false;\r\n    }\r\n\r\n\r\n    let newfileList = filesList.map((file: any, index: number) => {\r\n\r\n      let id =String(Math.random()).replace('\\.', '');\r\n      let name = file.name;\r\n      let size = file.size ? file.size : 0;\r\n      var extension = name.substring(name.lastIndexOf(\".\") + 1, name.length);//文件扩展名\r\n  \r\n      let fileObj = {\r\n        index: index,\r\n        id: id,\r\n        file: file,\r\n        name: file.name,\r\n        status: \"ready\",\r\n        progress: 0,\r\n        uid: '',\r\n        url: '',\r\n        fileId: '',\r\n        size: size,\r\n        md5: '',\r\n        fileName: name,\r\n        createTime: new Date().getTime(),\r\n        extension: extension,\r\n        downloadUrl: '',\r\n        previewUrl: '',\r\n      };\r\n      return fileObj\r\n    })\r\n  \r\n    this.setState({\r\n      file: filesList,\r\n      fileList: fileList.concat(newfileList)\r\n    }, () => {\r\n\r\n      this.updateFileList();\r\n\r\n      setTimeout(() => {\r\n        for (let index = 0; index < filesList.length; index++) {\r\n          const element = filesList[index];\r\n          this.sendFiles(element, newfileList[index].id);\r\n        }\r\n  \r\n      }, 10);\r\n\r\n    })\r\n\r\n  };\r\n\r\n  sendFiles = (file: any, id: string) => {\r\n    this.uploadStatus(id, {\r\n      progress: 0,\r\n      status: \"ready\",\r\n    }, () => {\r\n      this.sendFiles1(file, id)\r\n    });\r\n\r\n\r\n  }\r\n\r\n  // 把文件传到后端\r\n  sendFiles1 = async(file: any, id: string) => {\r\n    const { url, token } = this.props;\r\n    const { fileList } = this.state;\r\n\r\n    if (!file.name) {\r\n      return false;\r\n    }\r\n    // 获取文件后缀\r\n    let ext = fileExtension(file.name).toLowerCase();\r\n\r\n    // 获取文件MD5加密\r\n    let fileMd5 = await this.getFileMd5(file);\r\n\r\n    // 请求密钥\r\n    let sendData = {\r\n      client: 'R_Center',\r\n      extension: ext,\r\n      fileName: file.name,\r\n      genre: 1,\r\n      guid: null,\r\n      md5: fileMd5,\r\n      method: 'put',\r\n      provider: 'tencent',\r\n      size: file.size,\r\n    };\r\n    \r\n    try {\r\n      let response: any = await postSignatures(sendData, url, token);\r\n      console.log(\"UploadInput -> response\", response)\r\n  \r\n      // 判断文件是否还存在\r\n      let hasExist = this.props.fileList.some((fileListItem: any) => {\r\n\r\n        return fileListItem.id === id || \r\n        fileListItem.fileId === response.fileId ||\r\n        fileListItem.id === response.fileId ||\r\n        fileListItem.md5 === response.md5;\r\n      });\r\n\r\n      // 如果是token失效的时候\r\n      if (response.code === 40100) {\r\n        this.props.error('登录已失效，请重新登录！', 401);\r\n\r\n        return false;\r\n      }\r\n     \r\n\r\n      \r\n      /**当文件存在的时候**/\r\n      if (response && response.upload && hasExist) {\r\n        this.uploadStatus(id, {\r\n          progress: 100,\r\n          status: \"uploading\",\r\n        });\r\n\r\n        this.inputFile.value ? this.inputFile.value = null : '';\r\n   \r\n        // 判断文件是否已经存在\r\n        let hasFile = this.state.fileList.some((fileListItem: any) => {\r\n        \r\n          return fileListItem.uid === response.fileId || \r\n          fileListItem.fileId === response.fileId ||\r\n          fileListItem.md5 === response.md5;\r\n        });\r\n\r\n\r\n        if (!hasFile) {\r\n          message.success(`${file.name}  文件上传成功!`);\r\n\r\n          setTimeout(() => {\r\n            this.uploadStatus(id, {\r\n              progress: 100,\r\n              uid: response.fileId,\r\n              status: \"done\",\r\n              name: file.name,\r\n              url: response.path,\r\n              fileId: response.fileId,\r\n              md5: response.md5,\r\n              downloadUrl: response.path,\r\n              previewUrl: response.path,\r\n            });\r\n          }, 500)\r\n        } else if ( hasExist ){\r\n          this.props.error('文件已存在，不能重新上传！');\r\n          this.inputFile.value ? this.inputFile.value = null : '';\r\n          this.props.onCancelFile && this.props.onCancelFile(id);\r\n        }\r\n\r\n      } else if (hasExist) {\r\n        // 设置参数\r\n        let CosParam: CosParam = {\r\n          signature: response.signature,\r\n          bucket: response.bucket,\r\n          region: response.region,\r\n          path: response.path,\r\n          id: response.fileId,\r\n        };\r\n\r\n        this.sendCosFile(file, CosParam, id);\r\n\r\n      }\r\n    } catch (err) {\r\n      this.uploadStatus(id, {\r\n        progress: 0,\r\n        status: 'error'\r\n      });\r\n      this.props.error('网络错误,请稍后重试！');\r\n      this.inputFile.value ? this.inputFile.value = null : '';\r\n    }\r\n  }\r\n\r\n  // 进行请求腾讯云文件上传\r\n  sendCosFile = (file: any, CosParam: CosParam, id: string) => {\r\n    const { fileList } = this.state;\r\n    const { url, token } = this.props;\r\n    let that = this;\r\n\r\n    let OSSData = new Cos({\r\n      // @ts-ignore\r\n      getAuthorization: function (options: any, callback: Function) {\r\n        callback(CosParam.signature);\r\n      },\r\n    });\r\n\r\n    try {\r\n      OSSData.putObject(\r\n        {\r\n          Bucket: CosParam.bucket,\r\n          Region: CosParam.region,\r\n          Key: CosParam.path,\r\n          Body: file, // 上传文件对象\r\n          // SliceSize: '5M',\r\n          // AsyncLimit: '5',\r\n          // @ts-ignore\r\n          TaskReady: function (e: any) {\r\n            /* 非必须 */\r\n          },\r\n          // @ts-ignore\r\n          onHashProgress: function (e: any) {\r\n            /* 非必须 */\r\n            //\r\n          },\r\n          onProgress: function (e: any) { \r\n\r\n            that.uploadStatus(id, {\r\n              status: \"uploading\",\r\n              progress: Math.round(e.percent * 100)\r\n            });\r\n\r\n          },\r\n        },\r\n        async function (err: any, data: any) {\r\n\r\n          // 判断文件是否还存在id\r\n          let hasExist = that.props.fileList.some((fileListItem: any) => {\r\n            return fileListItem.id === id;\r\n          });\r\n\r\n          if (!err && data.statusCode === 200 && hasExist) {\r\n        \r\n            let response: any = await updateFile({ fileId: `${CosParam.id}`, version: 1.0 }, url, token);\r\n  \r\n            if (response) {\r\n              that.inputFile.value = null;\r\n  \r\n              // 判断文件是否已经存在\r\n              let hasFile = that.state.fileList.some((fileListItem: any) => {\r\n            \r\n                return fileListItem.uid === response.id || fileListItem.fileId === response.id;\r\n              });\r\n\r\n           \r\n              if (!hasFile) {\r\n\r\n                message.success(`${file.name}  文件上传成功!`);\r\n\r\n                that.uploadStatus(id, {\r\n                  progress: 100,\r\n                  uid: response.id,\r\n                  name: response.fileName,\r\n                  status: 'done',\r\n                  url: response.path,\r\n                  fileId: response.id,\r\n                  md5: response.md5,\r\n                  downloadUrl: response.path,\r\n                  previewUrl: response.path,\r\n                });\r\n              } else {\r\n\r\n                that.props.error('文件已存在，不能重新上传！');\r\n                that.props.onCancelFile && that.props.onCancelFile(id);\r\n              }\r\n  \r\n            }\r\n          } else if (hasExist) {\r\n            that.uploadStatus(id, {\r\n              progress: 0,\r\n              status: 'error'\r\n            });\r\n\r\n            that.props.error(`${file.name}  文件上传失败!`);\r\n          }\r\n        },\r\n      );\r\n    } catch {\r\n      this.props.error('网络错误,请稍后重试！');\r\n      this.inputFile.value ? this.inputFile.value = null : '';\r\n    }\r\n\r\n\r\n  };\r\n\r\n  // 更新不同文件的状态\r\n  uploadStatus = (id: string, options?: any, callback?: Function) => {\r\n\r\n    \r\n    // 判断文件是否已经存在\r\n    let hasFile = this.props.fileList.some((fileListItem: any) => {\r\n      return fileListItem.id === id;\r\n    });\r\n\r\n\r\n    if (hasFile) {\r\n      let newfileList = this.state.fileList.map((file: any) => {\r\n    \r\n        if (file.id === id) {\r\n          return {\r\n            ...file,\r\n            ...options\r\n          };\r\n        }\r\n        return file;\r\n      });\r\n  \r\n\r\n      this.setState({\r\n        fileList: newfileList\r\n      }, () => {\r\n        this.updateFileList();\r\n        callback && callback()\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  // 当文件上传成功的时候，更新列表\r\n\r\n  updateFileList = () => {\r\n    const { file, fileList } = this.state;\r\n    this.props.updateList({\r\n      file: file,\r\n      fileList: fileList,\r\n    });\r\n  };\r\n\r\n  getFileMd5 = async (file: any) => {\r\n    let md5String = new Promise((resolve, reject) => {\r\n      jsMd5File(\r\n        file,\r\n        // @ts-ignore\r\n        (err: any, fileMd5: any) => {\r\n          if (fileMd5) {\r\n            resolve(fileMd5);\r\n          }\r\n        },\r\n        function (err: any, data: any) {\r\n          if (err === 1 && data) {\r\n            reject(data);\r\n          }\r\n        },\r\n      );\r\n    });\r\n    return md5String;\r\n  };\r\n\r\n  render() {\r\n    const { children, accept, multiple = false } = this.props;\r\n\r\n    return (\r\n      <div onClick={() => this.inputFile.click()}>\r\n        <input\r\n          type=\"file\"\r\n          name=\"file\"\r\n          accept={accept}\r\n          multiple={multiple}\r\n          onChange={(e: any) => this.handleFiles(e)}\r\n          style={{ display: 'none' }}\r\n          ref={(e: any) => (this.inputFile = e)}\r\n        />\r\n        {children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UploadInput;\r\n"]}]}