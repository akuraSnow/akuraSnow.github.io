{"remainingRequest":"F:\\slate\\easteduCompoents\\node_modules\\thread-loader\\dist\\cjs.js??ref--11-1!F:\\slate\\easteduCompoents\\node_modules\\docz-core\\node_modules\\babel-loader\\lib\\index.js??ref--11-2!F:\\slate\\easteduCompoents\\node_modules\\source-map-loader\\index.js!F:\\slate\\easteduCompoents\\src\\QuestionEditor\\editor\\components\\UploadFile.ts","dependencies":[{"path":"F:\\slate\\easteduCompoents\\src\\QuestionEditor\\editor\\components\\UploadFile.ts","mtime":1611717659242},{"path":"F:\\slate\\easteduCompoents\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1611297672593},{"path":"F:\\slate\\easteduCompoents\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1611297676370},{"path":"F:\\slate\\easteduCompoents\\node_modules\\docz-core\\node_modules\\babel-loader\\lib\\index.js","mtime":1611297672218},{"path":"F:\\slate\\easteduCompoents\\node_modules\\source-map-loader\\index.js","mtime":1599723087186}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["F:/slate/easteduCompoents/src/QuestionEditor/editor/components/UploadFile.ts"],"names":["Cos","jsMd5File","fileExtension","Tips","postSignatures","updateFile","UploadFile","props","handleFiles","file","name","ext","toLowerCase","getFileMd5","fileMd5","sendData","client","extension","fileName","genre","guid","md5","method","provider","size","res","console","log","response","upload","uploadFile","uid","fileId","status","url","path","updateFileList","CosParam","signature","bucket","region","id","sendCosFile","that","OSSData","getAuthorization","options","callback","putObject","Bucket","Region","Key","Body","TaskReady","e","onHashProgress","onProgress","err","data","statusCode","version","error","open","message","type","time","imageUrl","callBack","md5String","Promise","resolve","reject","blob"],"mappings":"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","sourcesContent":["// @ts-nocheck\r\nimport Cos from 'cos-js-sdk-v5';\r\nimport jsMd5File from 'js-md5-file';\r\nimport fileExtension from 'file-extension';\r\n\r\n// import { Tips, message } from './../../index';\r\nimport { Tips } from '../../../MessageTips/index';\r\nimport {\r\n    postSignatures, // 获取签名\r\n    updateFile, // 上传文件成功后，更新数据\r\n  } from '../../services/EditdQuestion';\r\n\r\nclass UploadFile {\r\n\r\n    \r\n\r\n    constructor(props) {\r\n\r\n        console.log(props);\r\n\r\n        this.CosParam = {\r\n            signature: '',\r\n            bucket: '',\r\n            region: '',\r\n            path: '',\r\n            id: 0,\r\n        };\r\n\r\n        this.callBack = props.callBack;\r\n        this.handleFiles(props.blob);\r\n        this.imageUrl = '';\r\n        \r\n    }\r\n\r\n    // 点击上传文件\r\n    handleFiles = async (file: any) => {\r\n        // const file = e.target.files[0];\r\n\r\n        let name = file.name;\r\n\r\n        // 获取文件后缀\r\n        let ext = fileExtension(file.name).toLowerCase();\r\n\r\n        // 获取文件MD5加密\r\n        let fileMd5 = await this.getFileMd5(file);\r\n\r\n        // 请求密钥\r\n        let sendData = {\r\n            client: 'R_Center',\r\n            extension: ext,\r\n            fileName: file.name,\r\n            genre: 1,\r\n            guid: null,\r\n            md5: fileMd5,\r\n            method: 'put',\r\n            provider: 'tencent',\r\n            size: file.size,\r\n        };\r\n\r\n        let res = await postSignatures(sendData);\r\n\r\n        console.log('res===>', res);\r\n\r\n        let response = res;\r\n\r\n        /** 当文件存在的时候 **/\r\n        if (response.upload) {\r\n            let uploadFile = {\r\n                uid: response.fileId,\r\n                name: file.name,\r\n                status: 'done',\r\n                url: response.path,\r\n            };\r\n\r\n            this.file = uploadFile;\r\n\r\n            // Tips.open({\r\n            //     message: `${file.name}  文件上传成功!`,\r\n            //     type: 'success',\r\n            //     time: 2000\r\n            // });\r\n            // message.success(`${file.name}  文件上传成功!`);\r\n\r\n            // ;\r\n\r\n            this.updateFileList(response.path);\r\n\r\n        } else {\r\n            \r\n            // 设置参数\r\n\r\n            this.CosParam = {\r\n                signature: response.signature,\r\n                bucket: response.bucket,\r\n                region: response.region,\r\n                path: response.path,\r\n                id: response.fileId,\r\n            };\r\n\r\n            this.file = file;\r\n\r\n            this.sendCosFile();\r\n\r\n   \r\n        }\r\n    };\r\n\r\n    // 进行请求腾讯云文件上传\r\n    sendCosFile = () => {\r\n\r\n        let CosParam = this.CosParam;\r\n        let file = this.file;\r\n\r\n        let that = this;\r\n\r\n        // console.log('file===>', file);\r\n        // console.log('CosParam===>', CosParam);\r\n\r\n        let OSSData = new Cos({\r\n            getAuthorization: function (options, callback) {\r\n                callback(CosParam.signature);\r\n            },\r\n        });\r\n\r\n        OSSData.putObject(\r\n            {\r\n                Bucket: CosParam.bucket,\r\n                Region: CosParam.region,\r\n                Key: CosParam.path,\r\n                Body: file, // 上传文件对象\r\n                // SliceSize: '5M',\r\n                // AsyncLimit: '5',\r\n                TaskReady: function (e) {\r\n                    /* 非必须 */\r\n                },\r\n                onHashProgress: function (e) {\r\n                    /* 非必须 */\r\n                    //\r\n                },\r\n                onProgress: function (e) { },\r\n            },\r\n            async function (err, data) {\r\n                if (!err && data.statusCode === 200) {\r\n                    let res = await updateFile({ fileId: `${CosParam.id}`, version: 1.0 });\r\n                    let response = res;\r\n\r\n                    if (response) {\r\n\r\n                        let uploadFile = {\r\n                            uid: response.id,\r\n                            name: response.fileName,\r\n                            status: 'done',\r\n                            url: response.path,\r\n                        };\r\n\r\n                        that.file = uploadFile;\r\n                        \r\n                        that.updateFileList(response.path);\r\n\r\n                    }\r\n                } else {\r\n                    console.error('文件上传失败原因==>',err);\r\n                    Tips.open({\r\n                        message: '文件上传失败！',\r\n                        type: 'fail',\r\n                        time: 2000\r\n                    });\r\n                }\r\n            },\r\n        );\r\n    };\r\n\r\n    // 当文件上传成功的时候，更新列表\r\n\r\n    updateFileList = (path: any) => {\r\n        \r\n        this.imageUrl = path;\r\n\r\n        this.callBack(path);\r\n\r\n    };\r\n\r\n\r\n    getFileMd5 = async (file) => {\r\n        let md5String = new Promise((resolve, reject) => {\r\n            jsMd5File(\r\n                file,\r\n                /* eslint handle-callback-err: \"warn\" */\r\n                (err, fileMd5) => {\r\n                    console.log('fileMd5===>', fileMd5);\r\n                    if (fileMd5) {\r\n                        resolve(fileMd5);\r\n                    }\r\n                },\r\n                function (err, data) {\r\n                    if (err === 1 && data) {\r\n                        reject(data);\r\n                    }\r\n                },\r\n            );\r\n        });\r\n\r\n        return md5String;\r\n    };\r\n\r\n}\r\n\r\nexport default UploadFile;"]}]}