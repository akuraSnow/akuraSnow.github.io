{"remainingRequest":"F:\\next\\akuraSnow.github.io\\node_modules\\thread-loader\\dist\\cjs.js??ref--11-1!F:\\next\\akuraSnow.github.io\\node_modules\\docz-core\\node_modules\\babel-loader\\lib\\index.js??ref--11-2!F:\\next\\akuraSnow.github.io\\node_modules\\source-map-loader\\index.js!F:\\next\\akuraSnow.github.io\\src\\uploadFile\\servers\\request.ts","dependencies":[{"path":"F:\\next\\akuraSnow.github.io\\src\\uploadFile\\servers\\request.ts","mtime":1597627075134},{"path":"F:\\next\\akuraSnow.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1594630873110},{"path":"F:\\next\\akuraSnow.github.io\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1594630874798},{"path":"F:\\next\\akuraSnow.github.io\\node_modules\\docz-core\\node_modules\\babel-loader\\lib\\index.js","mtime":1594630866664},{"path":"F:\\next\\akuraSnow.github.io\\node_modules\\source-map-loader\\index.js","mtime":1594630874806}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSJGOlxcbmV4dFxcYWt1cmFTbm93LmdpdGh1Yi5pb1xcbm9kZV9tb2R1bGVzXFxiYWJlbC1wcmVzZXQtcmVhY3QtYXBwXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyIjsvKg0KICogQERlc2NyaXB0aW9uOiBJbiBVc2VyIFNldHRpbmdzIEVkaXQNCiAqIEBBdXRob3I6IHlvdXIgbmFtZQ0KICogQERhdGU6IDIwMTktMTAtMDkgMTM6MTM6NDUNCiAqIEBMYXN0RWRpdFRpbWU6IDIwMTktMTEtMjIgMTM6MDM6MDUNCiAqIEBMYXN0RWRpdG9yczogUGxlYXNlIHNldCBMYXN0RWRpdG9ycw0KICovIC8qKg0KICogcmVxdWVzdCDnvZHnu5zor7fmsYLlt6XlhbcNCiAqIOabtOivpue7hueahCBhcGkg5paH5qGjCDogaHR0cHM6Ly9naXRodWIuY29tL3VtaWpzL3VtaS1yZXF1ZXN0DQogKi9pbXBvcnR7ZXh0ZW5kfWZyb20ndW1pLXJlcXVlc3QnOy8qKg0KICog5byC5bi45aSE55CG56iL5bqPDQogKi92YXIgZXJyb3JIYW5kbGVyPWZ1bmN0aW9uIGVycm9ySGFuZGxlcihlcnJvcil7dmFyIHJlc3BvbnNlPWVycm9yLnJlc3BvbnNlLGRhdGE9ZXJyb3IuZGF0YTtyZXR1cm4gZGF0YTt9Oy8qKg0KICog6YWN572ucmVxdWVzdOivt+axguaXtueahOm7mOiupOWPguaVsA0KICovdmFyIHJlcXVlc3Q9ZXh0ZW5kKHtlcnJvckhhbmRsZXI6ZXJyb3JIYW5kbGVyLC8vIOm7mOiupOmUmeivr+WkhOeQhgp0aW1lb3V0OjEwMDAwLC8vIOiuvue9rui2heaXtgpjcmVkZW50aWFsczonaW5jbHVkZScvLyDpu5jorqTor7fmsYLmmK/lkKbluKbkuIpjb29raWUKfSk7Ly8gcmVxdWVzdOaLpuaIquWZqCwg5pS55Y+YdXJsIOaIliBvcHRpb25zLgpyZXF1ZXN0LmludGVyY2VwdG9ycy5yZXF1ZXN0LnVzZShmdW5jdGlvbih1cmwsb3B0aW9ucyl7dmFyIGNfdG9rZW49b3B0aW9ucy50b2tlbjtpZihjX3Rva2VuKXt2YXIgaGVhZGVycz17J0NvbnRlbnQtVHlwZSc6J2FwcGxpY2F0aW9uL2pzb24nLEFjY2VwdDonYXBwbGljYXRpb24vanNvbicsdXNlclRva2VuOmNfdG9rZW4sQXV0aG9yaXphdGlvbjonQmVhcmVyICcrY190b2tlbi8vICdBdXRob3JpemF0aW9uJzogJ2Jhc2ljIDEyMycKfTtyZXR1cm57dXJsOnVybCxvcHRpb25zOl9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSxvcHRpb25zKSx7fSx7aGVhZGVyczpoZWFkZXJzfSl9O31lbHNle3ZhciBfaGVhZGVycz17J0NvbnRlbnQtVHlwZSc6J2FwcGxpY2F0aW9uL2pzb24nLEFjY2VwdDonYXBwbGljYXRpb24vanNvbicsdXNlclRva2VuOmNfdG9rZW59O3JldHVybnt1cmw6dXJsLG9wdGlvbnM6X29iamVjdFNwcmVhZCh7fSxvcHRpb25zKX07fX0pOy8vIHJlc3BvbnNl5oum5oiq5ZmoLCDlpITnkIZyZXNwb25zZQovLyBAdHMtaWdub3JlCnJlcXVlc3QuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLnVzZShmdW5jdGlvbihyZXNwb25zZSxvcHRpb25zKXt2YXIgdG9rZW49cmVzcG9uc2UuaGVhZGVycy5nZXQoJ3VzZXJUb2tlbicpO2lmKHRva2VuKXtsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndXNlclRva2VuJyx0b2tlbik7fXJldHVybiByZXNwb25zZTt9KTtleHBvcnQgZGVmYXVsdCByZXF1ZXN0O2lmKHR5cGVvZiByZXF1ZXN0IT09J3VuZGVmaW5lZCcmJnJlcXVlc3QmJnJlcXVlc3Q9PT1PYmplY3QocmVxdWVzdCkmJk9iamVjdC5pc0V4dGVuc2libGUocmVxdWVzdCkpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1ZXN0LCdfX2ZpbGVtZXRhJyx7ZW51bWVyYWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlLHZhbHVlOntuYW1lOiJyZXF1ZXN0IixmaWxlbmFtZToic3JjXFx1cGxvYWRGaWxlXFxzZXJ2ZXJzXFxyZXF1ZXN0LnRzIn19KTt9"},{"version":3,"sources":["F:/next/akuraSnow.github.io/src/uploadFile/servers/request.ts"],"names":["extend","errorHandler","error","response","data","request","timeout","credentials","interceptors","use","url","options","c_token","token","headers","Accept","userToken","Authorization","get","localStorage","setItem"],"mappings":"wJAAA;;;;;;IAOA;;;GAIA,OAASA,MAAT,KAAuB,aAAvB,CAIA;;GAGA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,KAAD,CAA6C,IACxDC,CAAAA,QADwD,CACrCD,KADqC,CACxDC,QADwD,CAC9CC,IAD8C,CACrCF,KADqC,CAC9CE,IAD8C,CAGhE,MAAOA,CAAAA,IAAP,CACD,CAJD,CAMA;;GAGA,GAAMC,CAAAA,OAAO,CAAGL,MAAM,CAAC,CACrBC,YAAY,CAAZA,YADqB,CACP;AACdK,OAAO,CAAE,KAFY,CAEL;AAChBC,WAAW,CAAE,SAAW;AAHH,CAAD,CAAtB,CAMA;AACAF,OAAO,CAACG,YAAR,CAAqBH,OAArB,CAA6BI,GAA7B,CAAiC,SAACC,GAAD,CAAcC,OAAd,CAA+B,CAE9D,GAAIC,CAAAA,OAAO,CAAGD,OAAO,CAACE,KAAtB,CACA,GAAID,OAAJ,CAAa,CACX,GAAME,CAAAA,OAAO,CAAG,CACd,eAAgB,kBADF,CAEdC,MAAM,CAAE,kBAFM,CAGdC,SAAS,CAAEJ,OAHG,CAIdK,aAAa,CAAE,UAAYL,OAC3B;AALc,CAAhB,CAOA,MAAO,CACLF,GAAG,CAAEA,GADA,CAELC,OAAO,gCAAOA,OAAP,MAAgBG,OAAO,CAAEA,OAAzB,EAFF,CAAP,CAID,CAZD,IAYO,CACL,GAAMA,CAAAA,QAAO,CAAG,CACd,eAAgB,kBADF,CAEdC,MAAM,CAAE,kBAFM,CAGdC,SAAS,CAAEJ,OAHG,CAAhB,CAKA,MAAO,CACLF,GAAG,CAAEA,GADA,CAELC,OAAO,kBAAOA,OAAP,CAFF,CAAP,CAID,CACF,CA1BD,EA4BA;AACA;AACAN,OAAO,CAACG,YAAR,CAAqBL,QAArB,CAA8BM,GAA9B,CAAkC,SAACN,QAAD,CAAWQ,OAAX,CAAuB,CACvD,GAAIE,CAAAA,KAAK,CAAGV,QAAQ,CAACW,OAAT,CAAiBI,GAAjB,CAAqB,WAArB,CAAZ,CACA,GAAIL,KAAJ,CAAW,CACTM,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAkCP,KAAlC,EACD,CACD,MAAOV,CAAAA,QAAP,CACD,CAND,EAQA,cAAeE,CAAAA,OAAf,C","sourcesContent":["/*\r\n * @Description: In User Settings Edit\r\n * @Author: your name\r\n * @Date: 2019-10-09 13:13:45\r\n * @LastEditTime: 2019-11-22 13:03:05\r\n * @LastEditors: Please set LastEditors\r\n */\r\n/**\r\n * request 网络请求工具\r\n * 更详细的 api 文档\b: https://github.com/umijs/umi-request\r\n */\r\nimport { extend } from 'umi-request';\r\n\r\n\r\n\r\n/**\r\n * 异常处理程序\r\n */\r\nconst errorHandler = (error: { response: any, data:any }): any => {\r\n  const { response, data } = error;\r\n\r\n  return data;\r\n};\r\n\r\n/**\r\n * 配置request请求时的默认参数\r\n */\r\nconst request = extend({\r\n  errorHandler, // 默认错误处理\r\n  timeout: 10000, // 设置超时\r\n  credentials: 'include', // 默认请求是否带上cookie\r\n});\r\n\r\n// request拦截器, 改变url 或 options.\r\nrequest.interceptors.request.use((url: string, options: any) => {\r\n\r\n  let c_token = options.token;\r\n  if (c_token) {\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n      Accept: 'application/json',\r\n      userToken: c_token,\r\n      Authorization: 'Bearer ' + c_token,\r\n      // 'Authorization': 'basic 123'\r\n    };\r\n    return {\r\n      url: url,\r\n      options: { ...options, headers: headers },\r\n    };\r\n  } else {\r\n    const headers = {\r\n      'Content-Type': 'application/json',\r\n      Accept: 'application/json',\r\n      userToken: c_token,\r\n    };\r\n    return {\r\n      url: url,\r\n      options: { ...options },\r\n    };\r\n  }\r\n});\r\n\r\n// response拦截器, 处理response\r\n// @ts-ignore\r\nrequest.interceptors.response.use((response, options) => {\r\n  let token = response.headers.get('userToken');\r\n  if (token) {\r\n    localStorage.setItem('userToken', token);\r\n  }\r\n  return response;\r\n});\r\n\r\nexport default request;\r\n"]}]}